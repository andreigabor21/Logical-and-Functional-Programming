
void substitute(int i, TElem e, PNod p) {
    if (p == NULL || i < 0)
        return;
    if (i == 0) {
        p->e = e;
    }
    substitute(i - 1, e, p->urm);
}

int verifica(PNod p1, TElem e1)
{
    if (p1 == NULL)
        return 0;
    if (p1->e == e1)
    {
        return 1;
    }
    else return verifica(p1->urm, e1);
}
// 1 2 3    2 3  -> 1
void diff(PNod p1, PNod p2, Lista& nou) {
    if (p1 == NULL)
        return;
    if (!verifica(p2, p1->e)) {
        PNod p = new Nod();
        p->e = p1->e;
        p->urm = nou._prim;
        nou._prim = p;
    }
    else {
        diff(p1->urm, p2, nou);
    }
}

PNod invert(PNod head) {
    if (head == NULL || head->urm == NULL)
        return head;

    PNod right = invert(head->urm);
    head->urm->urm = head;
    head->urm = NULL;
    return right;
}